#!/usr/bin/env gosh
(use srfi-1)
(use srfi-13)
(use gauche.sequence)
(use gauche.collection)
(use text.tree)


(define (nlp100-sample)
  "hello")

(define (nlp100-00)
  (list->string (reverse (string->list "stressed"))))

(define (nlp100-01)
  (define s "パタトクカシーー")
  (define lst '#(1 3 5 7))

  (define (getstr str lst)
    (map (lambda (n) (subseq str (- n 1) n)) lst))
  (tree->string (getstr s lst)))

(define (nlp100-02)
  (define str1 "パトカー")
  (define str2 "タクシー")

  (define (getstr str1 str2)
    (cond
      ((null? str1) '())
      (else
        (cons (cons (car str1) (car str2)) (getstr (cdr str1) (cdr str2))))))
  (tree->string (getstr (string->list str1) (string->list str2))))


(define (nlp100-03)
  (define s "Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.")

  (define (getchar lst)
    (cond
      ((null? lst) '())
      (else
        (cons 
          (string-length (string-filter char-alphabetic? (car lst)))
          (getchar (cdr lst))))))
  (tree->string (getchar (string-split s " "))))

(define (nlp100-04)
  (define s "Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.")
  (define idxs '(1 5 6 7 8 9 15 16 19))

  (define (mkalist idx lst idxs)
    (cond
      ((null? lst) '())
      (else
        (cond
          ((null? idxs)
            (acons (subseq (car lst) 0 2) (car lst) (mkalist (+ 1 idx) (cdr lst) idxs)))
          ((= idx (car idxs))
            (acons (subseq (car lst) 0 1) (car lst) (mkalist (+ 1 idx) (cdr lst) (cdr idxs))))
          (else
            (acons (subseq (car lst) 0 2) (car lst) (mkalist (+ 1 idx) (cdr lst) idxs)))))))
  (mkalist 1 (string-split s " ") idxs ))

(define (nlp100-05-1)
  (define s "I am an NLPer")
  (define (bi-gram lst)
    (cond
      ((null? (cdr lst)) '())
      (else
        (cons (tree->string (cons (car lst) (cadr lst))) (bi-gram (cdr lst))))))
  (bi-gram (string-split s " ")))

(define (nlp100-05-2)
  (define s "I am an NLPer")
  (define (bi-gram lst)
    (cond
      ((null? (cdr lst)) '())
      (else
        (cons (tree->string (cons (car lst) (cadr lst))) (bi-gram (cdr lst))))))
    (bi-gram (string->list s)))

(define (nlp100-06)
  (define str1 "paraparaparadise")
  (define str2 "paragraph")

  (define (bi-gram lst)
    (cond
      ((null? (cdr lst)) '())
      (else
        (cons (tree->string (cons (car lst) (cadr lst))) (bi-gram (cdr lst))))))
  (print
    (bi-gram (string->list str1)))
  (print
    (bi-gram (string->list str2)))

  ;;和集合
  (print
    (lset-union equal?
      (bi-gram (string->list str1))
      (bi-gram (string->list str2))))
  ;;差集合
  (print
    (lset-difference equal?
      (bi-gram (string->list str1))
      (bi-gram (string->list str2))))
  ::積集合
  (print
    (lset-intersection equal?
      (bi-gram (string->list str1))
      (bi-gram (string->list str2))))

  (print
    (find (lambda (n) (equal? n "se")) (bi-gram (string->list str1))))
  (print
    (find (lambda (n) (equal? n "se")) (bi-gram (string->list str2))))
)

(define (nlp100-07 x y z)
  (format "~A時の~Aは~A" x y z))

(print (nlp100-07 12 "気温" 22.4))
